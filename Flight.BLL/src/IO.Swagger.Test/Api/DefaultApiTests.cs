/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            Assert.IsInstanceOf(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test AirportAutocomplete
        /// </summary>
        [Test]
        public void AirportAutocompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //    string apikey = "9qt9J2AStfgR54huLNS0RRiaffAOtE8D";
            //    string term = null;
            //    string country = null;
            //    bool? allAirports = null;
            //    var response = instance.AirportAutocomplete(apikey, term, country, allAirports);
            //    Assert.IsInstanceOf<List<AirportAutocompleteResponse>>(response, "response is List<AirportAutocompleteResponse>");
        }

        /// <summary>
        /// Test CarRentalAirportSearch
        /// </summary>
        [Test]
        public void CarRentalAirportSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string location = null;
            //string pickUp = null;
            //string dropOff = null;
            //string lang = null;
            //string currency = null;
            //string provider = null;
            //string rateClass = null;
            //string ratePlan = null;
            //string rateFilter = null;
            //List<string> vehicle = null;
            //var response = instance.CarRentalAirportSearch(apikey, location, pickUp, dropOff, lang, currency, provider, rateClass, ratePlan, rateFilter, vehicle);
            //Assert.IsInstanceOf<CarSearchResponse> (response, "response is CarSearchResponse");
        }
        
        /// <summary>
        /// Test CarRentalGeosearch
        /// </summary>
        [Test]
        public void CarRentalGeosearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //decimal? latitude = null;
            //decimal? longitude = null;
            //int? radius = null;
            //string pickUp = null;
            //string dropOff = null;
            //string lang = null;
            //string currency = null;
            //string provider = null;
            //string rateClass = null;
            //string ratePlan = null;
            //string rateFilter = null;
            //List<string> vehicle = null;
            //var response = instance.CarRentalGeosearch(apikey, latitude, longitude, radius, pickUp, dropOff, lang, currency, provider, rateClass, ratePlan, rateFilter, vehicle);
            //Assert.IsInstanceOf<CarSearchResponse> (response, "response is CarSearchResponse");
        }
        
        /// <summary>
        /// Test FlightAffiliateSearch
        /// </summary>
        [Test]
        public void FlightAffiliateSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string origin = null;
            //string destination = null;
            //string departureDate = null;
            //string returnDate = null;
            //int? adults = null;
            //int? children = null;
            //int? infants = null;
            //List<string> includeMerchants = null;
            //List<string> excludeMerchants = null;
            //int? maxPrice = null;
            //string currency = null;
            //bool? mobile = null;
            //var response = instance.FlightAffiliateSearch(apikey, origin, destination, departureDate, returnDate, adults, children, infants, includeMerchants, excludeMerchants, maxPrice, currency, mobile);
            //Assert.IsInstanceOf<AffiliateSearchResponse> (response, "response is AffiliateSearchResponse");
        }
        
        /// <summary>
        /// Test FlightExtensiveSearch
        /// </summary>
        [Test]
        public void FlightExtensiveSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string origin = null;
            //string destination = null;
            //string departureDate = null;
            //bool? oneWay = null;
            //string duration = null;
            //bool? direct = null;
            //string maxPrice = null;
            //string aggregationMode = null;
            //var response = instance.FlightExtensiveSearch(apikey, origin, destination, departureDate, oneWay, duration, direct, maxPrice, aggregationMode);
            //Assert.IsInstanceOf<ExtremeSearchResponse> (response, "response is ExtremeSearchResponse");
        }
        
        /// <summary>
        /// Test FlightInspirationSearch
        /// </summary>
        [Test]
        public void FlightInspirationSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string origin = null;
            //string destination = null;
            //string departureDate = null;
            //bool? oneWay = null;
            //string duration = null;
            //bool? direct = null;
            //string maxPrice = null;
            //string aggregationMode = null;
            //var response = instance.FlightInspirationSearch(apikey, origin, destination, departureDate, oneWay, duration, direct, maxPrice, aggregationMode);
            //Assert.IsInstanceOf<ExtremeSearchResponse> (response, "response is ExtremeSearchResponse");
        }
        
        /// <summary>
        /// Test FlightLowFareSearch
        /// </summary>
        [Test]
        public void FlightLowFareSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = "9qt9J2AStfgR54huLNS0RRiaffAOtE8D";
            //string origin = "BOS";
            //string destination = "LON";
            //string departureDate = "2018-12-25";
            //string returnDate = null;
            //string arriveBy = null;
            //string returnBy = null;
            //int? adults = null;
            //int? children = null;
            //int? infants = null;
            //List<string> includeAirlines = null;
            //List<string> excludeAirlines = null;
            //bool? nonstop = null;
            //int? maxPrice = null;
            //string currency = null;
            //string travelClass = null;
            //int? numberOfResults = null;
            //var response = instance.FlightLowFareSearch(apikey, origin, destination, departureDate, returnDate, arriveBy, returnBy, adults, children, infants, includeAirlines, excludeAirlines, nonstop, maxPrice, currency, travelClass, numberOfResults);
            //Assert.IsInstanceOf<LowFareSearchResponse>(response, "response is LowFareSearchResponse");
        }
        
        /// <summary>
        /// Test FlightTrafficAPI
        /// </summary>
        [Test]
        public void FlightTrafficAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string period = null;
            //string origin = null;
            //string destination = null;
            //int? numberOfResultsPerPeriod = null;
            //var response = instance.FlightTrafficAPI(apikey, period, origin, destination, numberOfResultsPerPeriod);
            //Assert.IsInstanceOf<List<FlightTrafficSearchResult>> (response, "response is List<FlightTrafficSearchResult>");
        }
        
        /// <summary>
        /// Test HotelAirportSearch
        /// </summary>
        [Test]
        public void HotelAirportSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string location = null;
            //string checkIn = null;
            //string checkOut = null;
            //int? radius = null;
            //string lang = null;
            //string currency = null;
            //string chain = null;
            //decimal? maxRate = null;
            //int? numberOfResults = null;
            //bool? allRooms = null;
            //bool? showSoldOut = null;
            //List<string> amenity = null;
            //var response = instance.HotelAirportSearch(apikey, location, checkIn, checkOut, radius, lang, currency, chain, maxRate, numberOfResults, allRooms, showSoldOut, amenity);
            //Assert.IsInstanceOf<HotelSearchResponse> (response, "response is HotelSearchResponse");
        }
        
        /// <summary>
        /// Test HotelGeosearchByBox
        /// </summary>
        [Test]
        public void HotelGeosearchByBoxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string southWestCorner = null;
            //string northEastCorner = null;
            //string checkIn = null;
            //string checkOut = null;
            //string lang = null;
            //string currency = null;
            //string chain = null;
            //decimal? maxRate = null;
            //int? numberOfResults = null;
            //bool? allRooms = null;
            //bool? showSoldOut = null;
            //List<string> amenity = null;
            //var response = instance.HotelGeosearchByBox(apikey, southWestCorner, northEastCorner, checkIn, checkOut, lang, currency, chain, maxRate, numberOfResults, allRooms, showSoldOut, amenity);
            //Assert.IsInstanceOf<HotelSearchResponse> (response, "response is HotelSearchResponse");
        }
        
        /// <summary>
        /// Test HotelGeosearchByCircle
        /// </summary>
        [Test]
        public void HotelGeosearchByCircleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //decimal? latitude = null;
            //decimal? longitude = null;
            //int? radius = null;
            //string checkIn = null;
            //string checkOut = null;
            //string lang = null;
            //string currency = null;
            //string chain = null;
            //decimal? maxRate = null;
            //int? numberOfResults = null;
            //bool? allRooms = null;
            //bool? showSoldOut = null;
            //List<string> amenity = null;
            //var response = instance.HotelGeosearchByCircle(apikey, latitude, longitude, radius, checkIn, checkOut, lang, currency, chain, maxRate, numberOfResults, allRooms, showSoldOut, amenity);
            //Assert.IsInstanceOf<HotelSearchResponse> (response, "response is HotelSearchResponse");
        }
        
        /// <summary>
        /// Test HotelPropertyCodeSearch
        /// </summary>
        [Test]
        public void HotelPropertyCodeSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string propertyCode = null;
            //string checkIn = null;
            //string checkOut = null;
            //string lang = null;
            //string currency = null;
            //bool? allRooms = null;
            //bool? showSoldOut = null;
            //var response = instance.HotelPropertyCodeSearch(apikey, propertyCode, checkIn, checkOut, lang, currency, allRooms, showSoldOut);
            //Assert.IsInstanceOf<HotelPropertyResponse> (response, "response is HotelPropertyResponse");
        }
        
        /// <summary>
        /// Test LocationInformation
        /// </summary>
        [Test]
        public void LocationInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string code = null;
            //var response = instance.LocationInformation(apikey, code);
            //Assert.IsInstanceOf<LocationResponse> (response, "response is LocationResponse");
        }
        
        /// <summary>
        /// Test NearestRelevantAirport
        /// </summary>
        [Test]
        public void NearestRelevantAirportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string latitude = null;
            //string longitude = null;
            //var response = instance.NearestRelevantAirport(apikey, latitude, longitude);
            //Assert.IsInstanceOf<List<NearestAirport>> (response, "response is List<NearestAirport>");
        }
        
        /// <summary>
        /// Test RailStationAutocomplete
        /// </summary>
        [Test]
        public void RailStationAutocompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string term = null;
            //var response = instance.RailStationAutocomplete(apikey, term);
            //Assert.IsInstanceOf<List<RailStationAutocompleteResponse>> (response, "response is List<RailStationAutocompleteResponse>");
        }
        
        /// <summary>
        /// Test RailStationInformation
        /// </summary>
        [Test]
        public void RailStationInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string id = null;
            //var response = instance.RailStationInformation(apikey, id);
            //Assert.IsInstanceOf<RailStationResponse> (response, "response is RailStationResponse");
        }
        
        /// <summary>
        /// Test TopFlightDestinations
        /// </summary>
        [Test]
        public void TopFlightDestinationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string period = null;
            //string origin = null;
            //int? numberOfResults = null;
            //var response = instance.TopFlightDestinations(apikey, period, origin, numberOfResults);
            //Assert.IsInstanceOf<TopDestinationsSearchResponse> (response, "response is TopDestinationsSearchResponse");
        }
        
        /// <summary>
        /// Test TopFlightSearches
        /// </summary>
        [Test]
        public void TopFlightSearchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string period = null;
            //string origin = null;
            //string country = null;
            //string destination = null;
            //int? numberOfResults = null;
            //var response = instance.TopFlightSearches(apikey, period, origin, country, destination, numberOfResults);
            //Assert.IsInstanceOf<TopSearchesSearchResponse> (response, "response is TopSearchesSearchResponse");
        }
        
        /// <summary>
        /// Test TrainExtensiveSearch
        /// </summary>
        [Test]
        public void TrainExtensiveSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string origin = null;
            //string destination = null;
            //string departureDate = null;
            //var response = instance.TrainExtensiveSearch(apikey, origin, destination, departureDate);
            //Assert.IsInstanceOf<ExtensiveTrainSearchResponse> (response, "response is ExtensiveTrainSearchResponse");
        }
        
        /// <summary>
        /// Test TrainScheduleSearch
        /// </summary>
        [Test]
        public void TrainScheduleSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string origin = null;
            //DateTime? departureDate = null;
            //var response = instance.TrainScheduleSearch(apikey, origin, departureDate);
            //Assert.IsInstanceOf<TrainScheduleSearchResponse> (response, "response is TrainScheduleSearchResponse");
        }
        
        /// <summary>
        /// Test TravelRecordRetrieve
        /// </summary>
        [Test]
        public void TravelRecordRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string recordLocator = null;
            //string lastName = null;
            //string env = null;
            //var response = instance.TravelRecordRetrieve(apikey, recordLocator, lastName, env);
            //Assert.IsInstanceOf<TravelRecordResponse> (response, "response is TravelRecordResponse");
        }
        
        /// <summary>
        /// Test YapQCityNameSearch
        /// </summary>
        [Test]
        public void YapQCityNameSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string cityName = null;
            //string lang = null;
            //string category = null;
            //bool? geonames = null;
            //bool? vibes = null;
            //bool? socialMedia = null;
            //string imageSize = null;
            //int? numberOfImages = null;
            //int? numberOfResults = null;
            //var response = instance.YapQCityNameSearch(apikey, cityName, lang, category, geonames, vibes, socialMedia, imageSize, numberOfImages, numberOfResults);
            //Assert.IsInstanceOf<PointsOfInterestResponse> (response, "response is PointsOfInterestResponse");
        }
        
        /// <summary>
        /// Test YapQGeosearch
        /// </summary>
        [Test]
        public void YapQGeosearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //decimal? latitude = null;
            //decimal? longitude = null;
            //int? radius = null;
            //string lang = null;
            //string category = null;
            //bool? geonames = null;
            //bool? vibes = null;
            //bool? socialMedia = null;
            //string imageSize = null;
            //int? numberOfImages = null;
            //int? numberOfResults = null;
            //var response = instance.YapQGeosearch(apikey, latitude, longitude, radius, lang, category, geonames, vibes, socialMedia, imageSize, numberOfImages, numberOfResults);
            //Assert.IsInstanceOf<PointsOfInterestResponse> (response, "response is PointsOfInterestResponse");
        }
        
    }

}
