/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrainSearchPricing
    /// </summary>
    [DataContract]
    public partial class TrainSearchPricing :  IEquatable<TrainSearchPricing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainSearchPricing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrainSearchPricing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainSearchPricing" /> class.
        /// </summary>
        /// <param name="ServiceClass">A standard enumeration of the type of seat, bed or service the passenger can expect. (required).</param>
        /// <param name="BookingCode">A code the identifies the type of booking class being used. (required).</param>
        /// <param name="Accomodation">A standard enumeration of the mode in which the passenger is accommodated. For example&amp;colon; SEAT, BERTH, CABIN, CARGO, UNKNOWN. (required).</param>
        /// <param name="TotalPrice">The total cost of this service. (required).</param>
        /// <param name="Rate">A rate identifying type of charge being levied for this service, and the restrictions that apply. (required).</param>
        public TrainSearchPricing(string ServiceClass = default(string), string BookingCode = default(string), string Accomodation = default(string), Amount TotalPrice = default(Amount), RestrictedRate Rate = default(RestrictedRate))
        {
            // to ensure "ServiceClass" is required (not null)
            if (ServiceClass == null)
            {
                throw new InvalidDataException("ServiceClass is a required property for TrainSearchPricing and cannot be null");
            }
            else
            {
                this.ServiceClass = ServiceClass;
            }
            // to ensure "BookingCode" is required (not null)
            if (BookingCode == null)
            {
                throw new InvalidDataException("BookingCode is a required property for TrainSearchPricing and cannot be null");
            }
            else
            {
                this.BookingCode = BookingCode;
            }
            // to ensure "Accomodation" is required (not null)
            if (Accomodation == null)
            {
                throw new InvalidDataException("Accomodation is a required property for TrainSearchPricing and cannot be null");
            }
            else
            {
                this.Accomodation = Accomodation;
            }
            // to ensure "TotalPrice" is required (not null)
            if (TotalPrice == null)
            {
                throw new InvalidDataException("TotalPrice is a required property for TrainSearchPricing and cannot be null");
            }
            else
            {
                this.TotalPrice = TotalPrice;
            }
            // to ensure "Rate" is required (not null)
            if (Rate == null)
            {
                throw new InvalidDataException("Rate is a required property for TrainSearchPricing and cannot be null");
            }
            else
            {
                this.Rate = Rate;
            }
        }
        
        /// <summary>
        /// A standard enumeration of the type of seat, bed or service the passenger can expect.
        /// </summary>
        /// <value>A standard enumeration of the type of seat, bed or service the passenger can expect.</value>
        [DataMember(Name="service_class", EmitDefaultValue=false)]
        public string ServiceClass { get; set; }

        /// <summary>
        /// A code the identifies the type of booking class being used.
        /// </summary>
        /// <value>A code the identifies the type of booking class being used.</value>
        [DataMember(Name="booking_code", EmitDefaultValue=false)]
        public string BookingCode { get; set; }

        /// <summary>
        /// A standard enumeration of the mode in which the passenger is accommodated. For example&amp;colon; SEAT, BERTH, CABIN, CARGO, UNKNOWN.
        /// </summary>
        /// <value>A standard enumeration of the mode in which the passenger is accommodated. For example&amp;colon; SEAT, BERTH, CABIN, CARGO, UNKNOWN.</value>
        [DataMember(Name="accomodation", EmitDefaultValue=false)]
        public string Accomodation { get; set; }

        /// <summary>
        /// The total cost of this service.
        /// </summary>
        /// <value>The total cost of this service.</value>
        [DataMember(Name="total_price", EmitDefaultValue=false)]
        public Amount TotalPrice { get; set; }

        /// <summary>
        /// A rate identifying type of charge being levied for this service, and the restrictions that apply.
        /// </summary>
        /// <value>A rate identifying type of charge being levied for this service, and the restrictions that apply.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public RestrictedRate Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrainSearchPricing {\n");
            sb.Append("  ServiceClass: ").Append(ServiceClass).Append("\n");
            sb.Append("  BookingCode: ").Append(BookingCode).Append("\n");
            sb.Append("  Accomodation: ").Append(Accomodation).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrainSearchPricing);
        }

        /// <summary>
        /// Returns true if TrainSearchPricing instances are equal
        /// </summary>
        /// <param name="input">Instance of TrainSearchPricing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrainSearchPricing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceClass == input.ServiceClass ||
                    (this.ServiceClass != null &&
                    this.ServiceClass.Equals(input.ServiceClass))
                ) && 
                (
                    this.BookingCode == input.BookingCode ||
                    (this.BookingCode != null &&
                    this.BookingCode.Equals(input.BookingCode))
                ) && 
                (
                    this.Accomodation == input.Accomodation ||
                    (this.Accomodation != null &&
                    this.Accomodation.Equals(input.Accomodation))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceClass != null)
                    hashCode = hashCode * 59 + this.ServiceClass.GetHashCode();
                if (this.BookingCode != null)
                    hashCode = hashCode * 59 + this.BookingCode.GetHashCode();
                if (this.Accomodation != null)
                    hashCode = hashCode * 59 + this.Accomodation.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
