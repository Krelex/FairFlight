/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An image size selector used in the YapQ API response. The size should correspond the the image_size parameter used during input
    /// </summary>
    [DataContract]
    public partial class ImageSize :  IEquatable<ImageSize>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageSize" /> class.
        /// </summary>
        /// <param name="Small">Small.</param>
        /// <param name="Medium">Medium.</param>
        /// <param name="Large">Large.</param>
        /// <param name="Hd">Hd.</param>
        public ImageSize(Image Small = default(Image), Image Medium = default(Image), Image Large = default(Image), Image Hd = default(Image))
        {
            this.Small = Small;
            this.Medium = Medium;
            this.Large = Large;
            this.Hd = Hd;
        }
        
        /// <summary>
        /// Gets or Sets Small
        /// </summary>
        [DataMember(Name="small", EmitDefaultValue=false)]
        public Image Small { get; set; }

        /// <summary>
        /// Gets or Sets Medium
        /// </summary>
        [DataMember(Name="medium", EmitDefaultValue=false)]
        public Image Medium { get; set; }

        /// <summary>
        /// Gets or Sets Large
        /// </summary>
        [DataMember(Name="large", EmitDefaultValue=false)]
        public Image Large { get; set; }

        /// <summary>
        /// Gets or Sets Hd
        /// </summary>
        [DataMember(Name="hd", EmitDefaultValue=false)]
        public Image Hd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageSize {\n");
            sb.Append("  Small: ").Append(Small).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Large: ").Append(Large).Append("\n");
            sb.Append("  Hd: ").Append(Hd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageSize);
        }

        /// <summary>
        /// Returns true if ImageSize instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageSize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageSize input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Small == input.Small ||
                    (this.Small != null &&
                    this.Small.Equals(input.Small))
                ) && 
                (
                    this.Medium == input.Medium ||
                    (this.Medium != null &&
                    this.Medium.Equals(input.Medium))
                ) && 
                (
                    this.Large == input.Large ||
                    (this.Large != null &&
                    this.Large.Equals(input.Large))
                ) && 
                (
                    this.Hd == input.Hd ||
                    (this.Hd != null &&
                    this.Hd.Equals(input.Hd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Small != null)
                    hashCode = hashCode * 59 + this.Small.GetHashCode();
                if (this.Medium != null)
                    hashCode = hashCode * 59 + this.Medium.GetHashCode();
                if (this.Large != null)
                    hashCode = hashCode * 59 + this.Large.GetHashCode();
                if (this.Hd != null)
                    hashCode = hashCode * 59 + this.Hd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
