/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PointOfInterestResult
    /// </summary>
    [DataContract]
    public partial class PointOfInterestResult :  IEquatable<PointOfInterestResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfInterestResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PointOfInterestResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfInterestResult" /> class.
        /// </summary>
        /// <param name="Title">Display name of a given point of interest (required).</param>
        /// <param name="MainImage">A link to an image of the given location (required).</param>
        /// <param name="Location">Location (required).</param>
        /// <param name="Grades">Grades (required).</param>
        /// <param name="Categories">Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter. (required).</param>
        /// <param name="Details">Details.</param>
        /// <param name="ContextualImages">Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter.</param>
        /// <param name="GeonameId">The GeonamesID of this point of interest, if available.</param>
        /// <param name="WalkTime">Time in minutes that it takes to walk from the searched coordinates to this Point of Interest.</param>
        public PointOfInterestResult(string Title = default(string), string MainImage = default(string), Geolocation Location = default(Geolocation), PointOfInterestResultGrades Grades = default(PointOfInterestResultGrades), List<string> Categories = default(List<string>), PointOfInterestDetails Details = default(PointOfInterestDetails), List<ImageSize> ContextualImages = default(List<ImageSize>), int? GeonameId = default(int?), decimal? WalkTime = default(decimal?))
        {
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for PointOfInterestResult and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "MainImage" is required (not null)
            if (MainImage == null)
            {
                throw new InvalidDataException("MainImage is a required property for PointOfInterestResult and cannot be null");
            }
            else
            {
                this.MainImage = MainImage;
            }
            // to ensure "Location" is required (not null)
            if (Location == null)
            {
                throw new InvalidDataException("Location is a required property for PointOfInterestResult and cannot be null");
            }
            else
            {
                this.Location = Location;
            }
            // to ensure "Grades" is required (not null)
            if (Grades == null)
            {
                throw new InvalidDataException("Grades is a required property for PointOfInterestResult and cannot be null");
            }
            else
            {
                this.Grades = Grades;
            }
            // to ensure "Categories" is required (not null)
            if (Categories == null)
            {
                throw new InvalidDataException("Categories is a required property for PointOfInterestResult and cannot be null");
            }
            else
            {
                this.Categories = Categories;
            }
            this.Details = Details;
            this.ContextualImages = ContextualImages;
            this.GeonameId = GeonameId;
            this.WalkTime = WalkTime;
        }
        
        /// <summary>
        /// Display name of a given point of interest
        /// </summary>
        /// <value>Display name of a given point of interest</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// A link to an image of the given location
        /// </summary>
        /// <value>A link to an image of the given location</value>
        [DataMember(Name="main_image", EmitDefaultValue=false)]
        public string MainImage { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Geolocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [DataMember(Name="grades", EmitDefaultValue=false)]
        public PointOfInterestResultGrades Grades { get; set; }

        /// <summary>
        /// Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter.
        /// </summary>
        /// <value>Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter.</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public PointOfInterestDetails Details { get; set; }

        /// <summary>
        /// Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter
        /// </summary>
        /// <value>Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter</value>
        [DataMember(Name="contextual_images", EmitDefaultValue=false)]
        public List<ImageSize> ContextualImages { get; set; }

        /// <summary>
        /// The GeonamesID of this point of interest, if available
        /// </summary>
        /// <value>The GeonamesID of this point of interest, if available</value>
        [DataMember(Name="geoname_id", EmitDefaultValue=false)]
        public int? GeonameId { get; set; }

        /// <summary>
        /// Time in minutes that it takes to walk from the searched coordinates to this Point of Interest
        /// </summary>
        /// <value>Time in minutes that it takes to walk from the searched coordinates to this Point of Interest</value>
        [DataMember(Name="walk_time", EmitDefaultValue=false)]
        public decimal? WalkTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointOfInterestResult {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MainImage: ").Append(MainImage).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  ContextualImages: ").Append(ContextualImages).Append("\n");
            sb.Append("  GeonameId: ").Append(GeonameId).Append("\n");
            sb.Append("  WalkTime: ").Append(WalkTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PointOfInterestResult);
        }

        /// <summary>
        /// Returns true if PointOfInterestResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PointOfInterestResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointOfInterestResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.MainImage == input.MainImage ||
                    (this.MainImage != null &&
                    this.MainImage.Equals(input.MainImage))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Grades == input.Grades ||
                    (this.Grades != null &&
                    this.Grades.Equals(input.Grades))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.ContextualImages == input.ContextualImages ||
                    this.ContextualImages != null &&
                    this.ContextualImages.SequenceEqual(input.ContextualImages)
                ) && 
                (
                    this.GeonameId == input.GeonameId ||
                    (this.GeonameId != null &&
                    this.GeonameId.Equals(input.GeonameId))
                ) && 
                (
                    this.WalkTime == input.WalkTime ||
                    (this.WalkTime != null &&
                    this.WalkTime.Equals(input.WalkTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.MainImage != null)
                    hashCode = hashCode * 59 + this.MainImage.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Grades != null)
                    hashCode = hashCode * 59 + this.Grades.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.ContextualImages != null)
                    hashCode = hashCode * 59 + this.ContextualImages.GetHashCode();
                if (this.GeonameId != null)
                    hashCode = hashCode * 59 + this.GeonameId.GetHashCode();
                if (this.WalkTime != null)
                    hashCode = hashCode * 59 + this.WalkTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
