/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FrequentTravelerCard
    /// </summary>
    [DataContract]
    public partial class FrequentTravelerCard :  IEquatable<FrequentTravelerCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentTravelerCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FrequentTravelerCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentTravelerCard" /> class.
        /// </summary>
        /// <param name="IssuerType">The type of organization that issued the card. This is an enumeration, possible values are AIRLINE, HOTEL_CHAIN, RENTAL_CAR_PROVIDER, RAILWAY. (required).</param>
        /// <param name="CompanyCode">The identifying code of the issuer, within the context of its type. For example&amp;colon; BA (and if the issuer type is AIRLINE, this indicates BA&#x3D;British Airways). (required).</param>
        /// <param name="CardNumber">The identifying number (or string) marked on the card. For example&amp;colon; 12345678. (required).</param>
        public FrequentTravelerCard(string IssuerType = default(string), string CompanyCode = default(string), string CardNumber = default(string))
        {
            // to ensure "IssuerType" is required (not null)
            if (IssuerType == null)
            {
                throw new InvalidDataException("IssuerType is a required property for FrequentTravelerCard and cannot be null");
            }
            else
            {
                this.IssuerType = IssuerType;
            }
            // to ensure "CompanyCode" is required (not null)
            if (CompanyCode == null)
            {
                throw new InvalidDataException("CompanyCode is a required property for FrequentTravelerCard and cannot be null");
            }
            else
            {
                this.CompanyCode = CompanyCode;
            }
            // to ensure "CardNumber" is required (not null)
            if (CardNumber == null)
            {
                throw new InvalidDataException("CardNumber is a required property for FrequentTravelerCard and cannot be null");
            }
            else
            {
                this.CardNumber = CardNumber;
            }
        }
        
        /// <summary>
        /// The type of organization that issued the card. This is an enumeration, possible values are AIRLINE, HOTEL_CHAIN, RENTAL_CAR_PROVIDER, RAILWAY.
        /// </summary>
        /// <value>The type of organization that issued the card. This is an enumeration, possible values are AIRLINE, HOTEL_CHAIN, RENTAL_CAR_PROVIDER, RAILWAY.</value>
        [DataMember(Name="issuer_type", EmitDefaultValue=false)]
        public string IssuerType { get; set; }

        /// <summary>
        /// The identifying code of the issuer, within the context of its type. For example&amp;colon; BA (and if the issuer type is AIRLINE, this indicates BA&#x3D;British Airways).
        /// </summary>
        /// <value>The identifying code of the issuer, within the context of its type. For example&amp;colon; BA (and if the issuer type is AIRLINE, this indicates BA&#x3D;British Airways).</value>
        [DataMember(Name="company_code", EmitDefaultValue=false)]
        public string CompanyCode { get; set; }

        /// <summary>
        /// The identifying number (or string) marked on the card. For example&amp;colon; 12345678.
        /// </summary>
        /// <value>The identifying number (or string) marked on the card. For example&amp;colon; 12345678.</value>
        [DataMember(Name="card_number", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrequentTravelerCard {\n");
            sb.Append("  IssuerType: ").Append(IssuerType).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FrequentTravelerCard);
        }

        /// <summary>
        /// Returns true if FrequentTravelerCard instances are equal
        /// </summary>
        /// <param name="input">Instance of FrequentTravelerCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrequentTravelerCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IssuerType == input.IssuerType ||
                    (this.IssuerType != null &&
                    this.IssuerType.Equals(input.IssuerType))
                ) && 
                (
                    this.CompanyCode == input.CompanyCode ||
                    (this.CompanyCode != null &&
                    this.CompanyCode.Equals(input.CompanyCode))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssuerType != null)
                    hashCode = hashCode * 59 + this.IssuerType.GetHashCode();
                if (this.CompanyCode != null)
                    hashCode = hashCode * 59 + this.CompanyCode.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
