/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CarSearchResult
    /// </summary>
    [DataContract]
    public partial class CarSearchResult :  IEquatable<CarSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CarSearchResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CarSearchResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CarSearchResult" /> class.
        /// </summary>
        /// <param name="Provider">Details of the car company offering this rental. (required).</param>
        /// <param name="Location">This car rental company&#39;s approximate geolocation. The exact quality of this parameter depends on the provider but it&#39;s usually quite accurate..</param>
        /// <param name="Airport">The exact quality of this parameter depends on the provider but it&#39;s usually quite accurate..</param>
        /// <param name="Cars">Further details about each of the vehicles offered by this car rental provider..</param>
        public CarSearchResult(Company Provider = default(Company), Geolocation Location = default(Geolocation), string Airport = default(string), List<Vehicle> Cars = default(List<Vehicle>))
        {
            // to ensure "Provider" is required (not null)
            if (Provider == null)
            {
                throw new InvalidDataException("Provider is a required property for CarSearchResult and cannot be null");
            }
            else
            {
                this.Provider = Provider;
            }
            this.Location = Location;
            this.Airport = Airport;
            this.Cars = Cars;
        }
        
        /// <summary>
        /// Details of the car company offering this rental.
        /// </summary>
        /// <value>Details of the car company offering this rental.</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public Company Provider { get; set; }

        /// <summary>
        /// This car rental company&#39;s approximate geolocation. The exact quality of this parameter depends on the provider but it&#39;s usually quite accurate.
        /// </summary>
        /// <value>This car rental company&#39;s approximate geolocation. The exact quality of this parameter depends on the provider but it&#39;s usually quite accurate.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Geolocation Location { get; set; }

        /// <summary>
        /// The exact quality of this parameter depends on the provider but it&#39;s usually quite accurate.
        /// </summary>
        /// <value>The exact quality of this parameter depends on the provider but it&#39;s usually quite accurate.</value>
        [DataMember(Name="airport", EmitDefaultValue=false)]
        public string Airport { get; set; }

        /// <summary>
        /// Further details about each of the vehicles offered by this car rental provider.
        /// </summary>
        /// <value>Further details about each of the vehicles offered by this car rental provider.</value>
        [DataMember(Name="cars", EmitDefaultValue=false)]
        public List<Vehicle> Cars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarSearchResult {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Airport: ").Append(Airport).Append("\n");
            sb.Append("  Cars: ").Append(Cars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CarSearchResult);
        }

        /// <summary>
        /// Returns true if CarSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CarSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Airport == input.Airport ||
                    (this.Airport != null &&
                    this.Airport.Equals(input.Airport))
                ) && 
                (
                    this.Cars == input.Cars ||
                    this.Cars != null &&
                    this.Cars.SequenceEqual(input.Cars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Airport != null)
                    hashCode = hashCode * 59 + this.Airport.GetHashCode();
                if (this.Cars != null)
                    hashCode = hashCode * 59 + this.Cars.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
